import httpx
import os
import logging

logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TARGET_CHANNEL_USERNAME = os.getenv("TARGET_CHANNEL_USERNAME")

async def get_chat_member(user_id: int, chat_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN is not set.")
        return None
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getChatMember"
    params = {"chat_id": chat_id, "user_id": user_id}
    async with httpx.AsyncClient() as client:
        try:
            logger.debug(f"Requesting getChatMember for user {user_id} in chat {chat_id}")
            response = await client.get(url, params=params)
            response.raise_for_status()
            logger.debug(f"getChatMember response for user {user_id}: {response.json()}")
            return response.json()
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP error getting chat member for user {user_id} in chat {chat_id}: {e.response.status_code} - {e.response.text}")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ, API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É 400 –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'left'/'kicked'
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
            try:
                return e.response.json()
            except Exception: # –ï—Å–ª–∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ JSON
                return {"ok": False, "description": e.response.text, "error_code": e.response.status_code} 
        except Exception as e:
            logger.error(f"General exception in get_chat_member for user {user_id} in {chat_id}: {e}")
            return None

async def check_user_subscription_status(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª."""
    if not TARGET_CHANNEL_USERNAME:
        logger.warning("TARGET_CHANNEL_USERNAME is not set. Subscription check bypassed, assuming subscribed.")
        return True # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –∑–∞–¥–∞–Ω, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        
    channel_id_for_api = TARGET_CHANNEL_USERNAME if TARGET_CHANNEL_USERNAME.startswith('@') else f"@{TARGET_CHANNEL_USERNAME}"
    
    member_info = await get_chat_member(user_id, channel_id_for_api)
    
    if member_info and member_info.get("ok"):
        status = member_info.get("result", {}).get("status")
        # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        valid_statuses = ["member", "administrator", "creator"]
        if status in valid_statuses:
            logger.info(f"User {user_id} IS SUBSCRIBED to {channel_id_for_api} with status: {status}")
            return True
        else:
            logger.info(f"User {user_id} IS NOT SUBSCRIBED to {channel_id_for_api}. Status: {status}")
            return False
    else:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω TARGET_CHANNEL_USERNAME
        # –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –∞–¥–º–∏–Ω –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ)
        description = member_info.get("description", "No description") if member_info else "No member_info"
        error_code = member_info.get("error_code", "N/A") if member_info else "N/A"
        logger.warning(f"Could not determine subscription status for user {user_id} in {channel_id_for_api}. Defaulting to NOT SUBSCRIBED. API Response/Description: {description} (Code: {error_code})")
        return False

async def send_telegram_message(user_id: int, text: str, reply_markup: dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN is not set. Cannot send message.")
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": user_id, "text": text, "parse_mode": "HTML"}
    if reply_markup:
        payload["reply_markup"] = reply_markup
        
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(url, json=payload)
            response.raise_for_status()
            logger.info(f"Message sent to user {user_id}. Response: {response.json().get('ok')}")
            return response.json().get('ok', False)
        except httpx.HTTPStatusError as e:
            logger.error(f"Error sending message to user {user_id}: {e.response.status_code} - {e.response.text}")
            return False
        except Exception as e:
            logger.error(f"General exception in send_telegram_message for user {user_id}: {e}")
            return False

async def send_subscription_prompt_message(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    if not TARGET_CHANNEL_USERNAME:
        logger.error("TARGET_CHANNEL_USERNAME is not set. Cannot send subscription prompt.")
        return False
    
    # –£–¥–∞–ª—è–µ–º @ –∏–∑ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    channel_name_for_link = TARGET_CHANNEL_USERNAME.replace('@', '')
    channel_link = f"https://t.me/{channel_name_for_link}"
    
    message_text = (
        f"üëã –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {channel_link}\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'."
    )
    
    inline_keyboard = {
        "inline_keyboard": [
            [{"text": "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", "url": channel_link}]
        ]
    }
    return await send_telegram_message(user_id, message_text, reply_markup=inline_keyboard) 