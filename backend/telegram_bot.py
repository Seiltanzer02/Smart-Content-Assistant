import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, PreCheckoutQuery, LabeledPrice
from aiogram.utils.keyboard import InlineKeyboardBuilder
import httpx
from datetime import datetime, timedelta

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã ---
def payment_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–ø–ª–∞—Ç–∏—Ç—å 70 ‚≠êÔ∏è", pay=True)
    return builder.as_markup()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy ---
@dp.message(F.text == "/buy")
async def send_invoice_handler(message: Message):
    prices = [LabeledPrice(label="XTR", amount=70)]  # 70 Stars
    await message.answer_invoice(
        title="–ü–æ–¥–ø–∏—Å–∫–∞ Premium",
        description="–ü–æ–¥–ø–∏—Å–∫–∞ Premium –Ω–∞ 1 –º–µ—Å—è—Ü",
        prices=prices,
        provider_token="",  # –î–ª—è Stars ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞!
        payload=f"premium_sub_{message.from_user.id}",
        currency="XTR",
        reply_markup=payment_keyboard(),
    )

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!) ---
@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã ---
@dp.message(F.successful_payment)
async def success_payment_handler(message: Message):
    user_id = message.from_user.id
    payment_id = message.successful_payment.telegram_payment_charge_id
    now = datetime.utcnow().isoformat()
    end_date = (datetime.utcnow() + timedelta(days=31)).isoformat()
    # --- –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ user_subscription ---
    try:
        async with httpx.AsyncClient() as client:
            url = f"{SUPABASE_URL}/rest/v1/user_subscription"
            headers = {
                "apikey": SUPABASE_ANON_KEY,
                "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
                "Content-Type": "application/json"
            }
            data = {
                "user_id": user_id,
                "start_date": now,
                "end_date": end_date,
                "payment_id": payment_id,
                "is_active": True,
                "created_at": now,
                "updated_at": now
            }
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å upsert –ø–æ user_id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å)
            response = await client.post(url, headers=headers, json=data)
            if response.status_code not in (200, 201):
                await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {response.text}")
                return
    except Exception as e:
        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        return
    await message.answer("ü•≥ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏! –í–∞—à Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

# --- –ó–∞–ø—É—Å–∫ long polling ---
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))

# ---
# –¢—Ä–µ–±—É–µ–º–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:
# –í requirements.txt –¥–æ–±–∞–≤–∏—Ç—å:
# aiogram==3.7.0
# aiohttp
# httpx
# ---
# –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
# 1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (Render)
# 2. –í Telegram –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ–º—É –±–æ—Ç—É /buy ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
# 3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
# --- 