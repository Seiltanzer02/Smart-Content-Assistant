import React, { useState, useEffect, useRef } from 'react';
import './DirectPremiumStatus.css';
import { PremiumStatus, getPremiumStatus, getRawPremiumStatus, openPremiumStatusPage, forcePremiumStatus } from '../api/subscription';

interface DirectPremiumStatusProps {
  userId?: string | null;
  forcePremium?: boolean;
}

// API_URL –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
const API_URL = '';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç API-V2 –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 */
const DirectPremiumStatus: React.FC<DirectPremiumStatusProps> = ({ userId, forcePremium = false }) => {
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [premiumStatus, setPremiumStatus] = useState<PremiumStatus | null>(null);
  const [debugInfo, setDebugInfo] = useState<string | null>(null);
  const userIdRef = useRef<string | null>(null);
  const attempts = useRef<number>(0);
  const usingFallback = useRef<boolean>(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞/–ø–æ–ª—É—á–µ–Ω–∏–µ userId –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  useEffect(() => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userId –∏–∑ –ø—Ä–æ–ø—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (userId) {
      userIdRef.current = userId;
      console.log(`[DirectStatus] –ü–æ–ª—É—á–µ–Ω userId –∏–∑ props: ${userId}`);
    } 
    // –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–Ω–æ Telegram
      if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
        userIdRef.current = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
        console.log(`[DirectStatus] –ü–æ–ª—É—á–µ–Ω userId –∏–∑ Telegram.WebApp: ${userIdRef.current}`);
      } 
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
      else if (window.INJECTED_USER_ID) {
        userIdRef.current = window.INJECTED_USER_ID;
        console.log(`[DirectStatus] –ü–æ–ª—É—á–µ–Ω userId –∏–∑ INJECTED_USER_ID: ${userIdRef.current}`);
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
      else if (localStorage.getItem('contenthelper_user_id')) {
        userIdRef.current = localStorage.getItem('contenthelper_user_id');
        console.log(`[DirectStatus] –ü–æ–ª—É—á–µ–Ω userId –∏–∑ localStorage: ${userIdRef.current}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º–∞, –µ—Å–ª–∏ userId –∏–∑–≤–µ—Å—Ç–µ–Ω
    if (userIdRef.current) {
      checkPremiumStatus();
    } else {
      setLoading(false);
      setError('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }, [userId]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º–∞
  const checkPremiumStatus = async () => {
    if (!userIdRef.current) {
      setLoading(false);
      setError('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    setLoading(true);
    setError(null);
    attempts.current += 1;
    
    try {
      console.log(`[DirectStatus] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ID: ${userIdRef.current}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ RAW API
      if (attempts.current <= 1 || !usingFallback.current) {
        try {
          const premiumData = await getRawPremiumStatus(userIdRef.current, `_nocache=${Date.now()}`);
          console.log(`[DirectStatus] –ü–æ–ª—É—á–µ–Ω RAW –æ—Ç–≤–µ—Ç:`, premiumData);
          setPremiumStatus(premiumData);
          setDebugInfo(JSON.stringify(premiumData, null, 2));
          setLoading(false);
          return;
        } catch (rawError) {
          console.error('[DirectStatus] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RAW —Å—Ç–∞—Ç—É—Å–∞:', rawError);
          console.log('[DirectStatus] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ã—á–Ω—ã–π API...');
          usingFallback.current = true;
        }
      }
      
      // –ï—Å–ª–∏ RAW API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π API
      const premiumData = await getPremiumStatus(userIdRef.current, `_nocache=${Date.now()}`);
      console.log(`[DirectStatus] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:`, premiumData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã HTML –≤–º–µ—Å—Ç–æ JSON
      if (typeof premiumData === 'string' && 
          (premiumData.includes('<!doctype html>') || premiumData.includes('<html>'))) {
        console.error('[DirectStatus] –ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON');
        throw new Error('–ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–±–ª–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ API)');
      }
      
      setPremiumStatus(premiumData);
      setDebugInfo(JSON.stringify(premiumData, null, 2));
      
    } catch (err) {
      console.error('[DirectStatus] –û—à–∏–±–∫–∞:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–µ–º–∏—É–º–∞
  const openStatusPage = () => {
    if (userIdRef.current) {
      openPremiumStatusPage(userIdRef.current, true);
    }
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  return (
    <div className="direct-premium-status">
      {loading ? (
        <div className="direct-status loading">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...</div>
      ) : error ? (
        <div className="direct-status error">
          {error}
          <div className="actions">
            <button 
              className="refresh-button"
              onClick={checkPremiumStatus}
            >
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
            </button>
            
            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
            {userIdRef.current && (
              <button 
                className="status-page-button"
                onClick={openStatusPage}
              >
                –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
              </button>
            )}
            
            {/* –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */}
            {userIdRef.current && (
              <button 
                className="debug-button"
                onClick={() => {
                  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                  window.open(`/api/subscription/debug/${userIdRef.current}?create_test=true`, '_blank');
                }}
              >
                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
              </button>
            )}
          </div>
          
          {/* –§–æ—Ä–º–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ userId */}
          <div className="manual-userid-form">
            <input 
              type="text" 
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –≤—Ä—É—á–Ω—É—é" 
              defaultValue={userIdRef.current || ''}
              onChange={(e) => {
                const value = e.target.value.trim();
                if (value && !isNaN(Number(value))) {
                  userIdRef.current = value;
                  localStorage.setItem('contenthelper_user_id', value);
                }
              }}
            />
            <button onClick={checkPremiumStatus}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
            
            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ */}
            <button 
              className="force-premium-button" 
              onClick={() => {
                if (!userIdRef.current) return;
                forcePremiumStatus(userIdRef.current, true, 30);
                // –û–±–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ç–æ–∂–µ
                setPremiumStatus({
                  has_premium: true,
                  user_id: userIdRef.current,
                  error: null,
                  subscription_end_date: new Date(Date.now() + 30*24*60*60*1000).toISOString(),
                  analysis_count: 9999,
                  post_generation_count: 9999
                });
                setError(null);
                setLoading(false);
              }}
            >
              –ü—Ä–µ–º–∏—É–º üëë
            </button>
          </div>
        </div>
      ) : premiumStatus?.has_premium || forcePremium ? (
        <div className="direct-status premium">
          <div className="premium-badge">
            <span className="premium-icon">‚≠ê</span>
            –ü–†–ï–ú–ò–£–ú
          </div>
          
          {forcePremium && !premiumStatus?.has_premium && (
            <div className="forced-premium-badge">
              <span className="forced-note">–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</span>
            </div>
          )}
          
          {premiumStatus?.subscription_end_date && (
            <div className="expiry-date">
              –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {new Date(premiumStatus.subscription_end_date).toLocaleDateString()}
            </div>
          )}
          
          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
          <button 
            className="status-page-button"
            onClick={openStatusPage}
          >
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
          </button>
          
          {debugInfo && (
            <div className="debug-data">
              <details>
                <summary>–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏</summary>
                <pre>{debugInfo}</pre>
              </details>
            </div>
          )}
        </div>
      ) : (
        <div className="direct-status free">
          <div className="free-badge">–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø</div>
          <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É</p>
          
          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
          <button 
            className="status-page-button"
            onClick={openStatusPage}
          >
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
          </button>
          
          {debugInfo && (
            <div className="debug-data">
              <details>
                <summary>–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏</summary>
                <pre>{debugInfo}</pre>
              </details>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default DirectPremiumStatus; 