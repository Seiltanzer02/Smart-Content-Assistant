import React, { useState, useEffect, useRef } from 'react';
import '../styles/SubscriptionWidget.css';
import { SubscriptionStatus } from '../api/subscription';
import { Button, Box, Typography, CircularProgress, Paper } from '@mui/material';
import moment from 'moment';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const SUBSCRIPTION_PRICE = 1; // –≤—Ä–µ–º–µ–Ω–Ω–æ 1 Star –¥–ª—è —Ç–µ—Å—Ç–∞

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã end_date
const isEndDateValid = (dateStr: string | null | undefined): boolean => {
  if (!dateStr) return false;
  
  try {
    const endDate = new Date(dateStr);
    const now = new Date();
    return !isNaN(endDate.getTime()) && endDate > now;
  } catch (e) {
    console.error(`[SubscriptionWidget] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã: ${e}`);
    return false;
  }
};

const SubscriptionWidget: React.FC<{
  userId: string | null;
  subscriptionStatus: SubscriptionStatus | null;
  onSubscriptionUpdate: () => void;
  isActive?: boolean;
}> = ({ userId, subscriptionStatus, onSubscriptionUpdate }) => {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [error, setError] = useState<string | null>(null);
  const [isSubscribing, setIsSubscribing] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [refreshLog, setRefreshLog] = useState<string[]>([]);
  const [lastUpdateTime, setLastUpdateTime] = useState<string>(
    new Date().toLocaleTimeString()
  );

  // –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [calculatedIsActive, setCalculatedIsActive] = useState<boolean>(false);
  const [validEndDate, setValidEndDate] = useState<boolean>(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  const [showPaymentInfo, setShowPaymentInfo] = useState<boolean>(false);
  
  // –†–µ—Ñ—ã –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const mountedRef = useRef(true);
  const statusIntervalRef = useRef<number | null>(null);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const addToRefreshLog = (message: string) => {
    setRefreshLog(prev => {
      const newLog = [`[${new Date().toLocaleTimeString()}] ${message}`, ...prev];
      return newLog.slice(0, 10); // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
    });
    setLastUpdateTime(new Date().toLocaleTimeString());
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏
  useEffect(() => {
    try {
      if (subscriptionStatus) {
        console.log('[SubscriptionWidget] üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö subscriptionStatus:', subscriptionStatus);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ end_date
        const hasValidEndDate = isEndDateValid(subscriptionStatus.subscription_end_date);
        setValidEndDate(hasValidEndDate);
        
        // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        const isActive = hasValidEndDate || (subscriptionStatus.is_active && subscriptionStatus.has_subscription);
        setCalculatedIsActive(isActive);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        addToRefreshLog(`–°—Ç–∞—Ç—É—Å: has_sub=${subscriptionStatus.has_subscription}, is_active=${subscriptionStatus.is_active}, end_date=${subscriptionStatus.subscription_end_date || 'null'}`);
        
        // –í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        if (hasValidEndDate && (!subscriptionStatus.is_active || !subscriptionStatus.has_subscription)) {
          console.warn('[SubscriptionWidget] ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: end_date –≤–∞–ª–∏–¥–Ω–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
          addToRefreshLog(`‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: date_end –≤–∞–ª–∏–¥–Ω–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
        }
      } else {
        console.log('[SubscriptionWidget] subscriptionStatus –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        setCalculatedIsActive(false);
        setValidEndDate(false);
      }
    } catch (err) {
      console.error('[SubscriptionWidget] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ');
    }
  }, [subscriptionStatus]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  const refreshSubscriptionStatus = async () => {
    if (!userId || isRefreshing) return;
    
    try {
      console.log('[SubscriptionWidget] üîÑ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞...');
      setIsRefreshing(true);
      addToRefreshLog('–ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞...');
      
      await onSubscriptionUpdate();
      
      addToRefreshLog('‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (err) {
      console.error('[SubscriptionWidget] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏');
      addToRefreshLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${err}`);
    } finally {
      if (mountedRef.current) {
        setIsRefreshing(false);
      }
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
  useEffect(() => {
    console.log('[SubscriptionWidget] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
    refreshSubscriptionStatus();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
    statusIntervalRef.current = window.setInterval(() => {
      if (mountedRef.current) {
        console.log('[SubscriptionWidget] –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞');
        onSubscriptionUpdate();
      }
    }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    return () => {
      mountedRef.current = false;
      if (statusIntervalRef.current) {
        clearInterval(statusIntervalRef.current);
      }
      console.log('[SubscriptionWidget] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
    };
  }, [userId, onSubscriptionUpdate]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  useEffect(() => {
    try {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.ready();
        
        if (window.Telegram.WebApp.MainButton) {
          window.Telegram.WebApp.MainButton.setText(`–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∑–∞ ${SUBSCRIPTION_PRICE} Stars`);
          window.Telegram.WebApp.MainButton.color = '#2481cc';
          window.Telegram.WebApp.MainButton.textColor = '#ffffff';
          
          if (calculatedIsActive) {
            window.Telegram.WebApp.MainButton.hide();
          } else {
            window.Telegram.WebApp.MainButton.show();
            window.Telegram.WebApp.MainButton.onClick(handleSubscribeViaMainButton);
          }
        }
        
        if (typeof window.Telegram.WebApp.onEvent === 'function') {
          window.Telegram.WebApp.onEvent('popup_closed', () => {
            console.log('[SubscriptionWidget] popup_closed event');
            onSubscriptionUpdate();
          });
          
          window.Telegram.WebApp.onEvent('invoiceClosed', () => {
            console.log('[SubscriptionWidget] invoiceClosed event');
            onSubscriptionUpdate();
          });
        }
      }
    } catch (e) {
      console.error('[SubscriptionWidget] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', e);
    }
  }, [calculatedIsActive, onSubscriptionUpdate]);

  // –û—á–∏—Å—Ç–∫–∞ MainButton –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      try {
        if (window.Telegram?.WebApp?.MainButton && typeof window.Telegram.WebApp.MainButton.offClick === 'function') {
          window.Telegram.WebApp.MainButton.offClick(handleSubscribeViaMainButton);
        }
      } catch (e) {
        console.error('[SubscriptionWidget] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ MainButton:', e);
      }
    };
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ MainButton
  const handleSubscribeViaMainButton = () => {
    try {
      console.log('[SubscriptionWidget] –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ MainButton –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏');
      if (window.Telegram?.WebApp?.showConfirm) {
        window.Telegram.WebApp.showConfirm(
          `–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ ${SUBSCRIPTION_PRICE} Stars?`,
          (confirmed) => {
            if (confirmed) {
              handleSubscribe();
            }
          }
        );
      } else {
        handleSubscribe();
      }
    } catch (e) {
      console.error('[SubscriptionWidget] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ MainButton:', e);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏
  const handleSubscribe = async () => {
    if (!userId) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    await handleInvoiceGeneration(userId);
  };

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã Stars
  const handleInvoiceGeneration = async (userId: string) => {
    if (!window.Telegram?.WebApp) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram WebApp –¥–ª—è –æ–ø–ª–∞—Ç—ã');
      return;
    }

    try {
      setIsSubscribing(true);
      
      const response = await fetch('/generate-stars-invoice-link', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: userId, amount: SUBSCRIPTION_PRICE })
      });
      
      const data = await response.json();
      console.log('[SubscriptionWidget] –û—Ç–≤–µ—Ç –æ—Ç /generate-stars-invoice-link:', data);
      
      if (data.success && data.invoice_link) {
        if (typeof window.Telegram.WebApp.openInvoice === 'function') {
          window.Telegram.WebApp.openInvoice(data.invoice_link, async (status) => {
            setIsSubscribing(false);
            console.log(`[SubscriptionWidget] openInvoice callback —Å—Ç–∞—Ç—É—Å: ${status}`);
            
            if (status === 'paid') {
              console.log('[SubscriptionWidget] –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å...');
              
              // –°–µ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
              const intervals = [1000, 2000, 3000, 5000, 10000];
              
              await onSubscriptionUpdate();
              
              for (const interval of intervals) {
                await new Promise(resolve => setTimeout(resolve, interval));
                await onSubscriptionUpdate();
              }
              
              if (window.Telegram.WebApp.showPopup) {
                window.Telegram.WebApp.showPopup({
                  title: '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
                  message: '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å...',
                  buttons: [{ type: 'ok' }]
                });
              }
            }
          });
        } else {
          setError('–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Stars –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
          setIsSubscribing(false);
        }
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–æ–π—Å–∞');
        setIsSubscribing(false);
      }
    } catch (error) {
      setError(`–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setIsSubscribing(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ
  const togglePaymentInfo = () => setShowPaymentInfo(!showPaymentInfo);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è userId
  if (!userId) {
    return (
      <Paper elevation={3} sx={{ p: 3, mb: 3, borderRadius: 2 }}>
        <Typography variant="h6" align="center" color="error" gutterBottom>
          –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        </Typography>
        <Typography>
          –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
        </Typography>
      </Paper>
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  if (error) {
    return (
      <Paper elevation={3} sx={{ p: 3, mb: 3, borderRadius: 2 }}>
        <Typography variant="h6" align="center" color="error" gutterBottom>
          –û—à–∏–±–∫–∞
        </Typography>
        <Typography paragraph>{error}</Typography>
        <Button 
          variant="contained" 
          onClick={refreshSubscriptionStatus} 
          disabled={isRefreshing}
        >
          {isRefreshing ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'}
        </Button>
      </Paper>
    );
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (!subscriptionStatus) {
    return (
      <Paper elevation={3} sx={{ p: 3, mb: 3, borderRadius: 2, textAlign: 'center' }}>
        <CircularProgress size={40} />
        <Typography variant="body1" sx={{ mt: 2 }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ...
        </Typography>
      </Paper>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
  return (
    <Paper elevation={3} sx={{ p: 3, mb: 3, borderRadius: 2 }}>
      <Typography variant="h5" align="center" gutterBottom>
        –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      </Typography>
      
      {calculatedIsActive ? (
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        <>
          <div className="status-badge premium">–ü—Ä–µ–º–∏—É–º</div>
          <Box sx={{ mt: 2, mb: 2 }}>
            <Typography variant="h6" align="center" color="success.main" gutterBottom>
              –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω
            </Typography>
            
            {subscriptionStatus.subscription_end_date && (
              <Typography variant="body2" align="center" color="text.secondary">
                –ê–∫—Ç–∏–≤–µ–Ω –¥–æ: {moment(subscriptionStatus.subscription_end_date).format('DD.MM.YYYY')}
              </Typography>
            )}
          </Box>
          
          <div className="subscription-active">
            <Typography variant="body1" paragraph>
              –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:
            </Typography>
            <ul>
              <li>–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤</li>
              <li>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π</li>
              <li>–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
              <li>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π</li>
            </ul>
          </div>
        </>
      ) : (
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        <>
          <div className="status-badge free">–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω</div>
          <Box sx={{ mt: 2, mb: 2 }}>
            <Typography variant="h6" align="center" gutterBottom>
              –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω
            </Typography>
          </Box>
          
          <div className="subscription-free">
            <Typography variant="body1" paragraph>
              –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
            </Typography>
            
            <div className="subscription-offer">
              <Typography variant="h6" gutterBottom>
                –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:
              </Typography>
              <ul>
                <li>–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤</li>
                <li>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π</li>
                <li>–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
                <li>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π</li>
              </ul>
              
              <Button 
                variant="contained" 
                color="primary"
                onClick={handleSubscribe}
                disabled={isSubscribing}
                fullWidth
                sx={{ mt: 2, mb: 1 }}
              >
                {isSubscribing ? '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø'} 
              </Button>
              
              <Typography 
                variant="body2" 
                sx={{ mt: 1, textAlign: 'center', cursor: 'pointer', color: 'primary.main' }}
                onClick={togglePaymentInfo}
              >
                {showPaymentInfo ? '–°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ' : '–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?'}
              </Typography>
              
              {showPaymentInfo && (
                <Box sx={{ mt: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>
                  <Typography variant="h6" gutterBottom>
                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
                  </Typography>
                  <Typography variant="body2" paragraph>
                    –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Stars:
                  </Typography>
                  <ol>
                    <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø"</li>
                    <li>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ Telegram</li>
                    <li>–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</li>
                  </ol>
                  <Typography variant="caption" display="block">
                    * –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_PRICE} Telegram Stars
                  </Typography>
                  <Button 
                    variant="outlined" 
                    size="small" 
                    onClick={togglePaymentInfo} 
                    sx={{ mt: 1 }}
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </Button>
                </Box>
              )}
            </div>
          </div>
        </>
      )}
      
      {/* –ë–ª–æ–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ */}
      <Box sx={{ mt: 3, textAlign: 'center' }}>
        <Button
          variant="outlined"
          size="small"
          onClick={refreshSubscriptionStatus}
          disabled={isRefreshing}
          startIcon={isRefreshing ? <CircularProgress size={16} /> : null}
        >
          {isRefreshing ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'}
        </Button>
        <Typography variant="caption" display="block" sx={{ mt: 1 }}>
          –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdateTime}
        </Typography>
      </Box>
      
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ */}
      <Box sx={{ mt: 3 }}>
        <details>
          <summary style={{ cursor: 'pointer' }}>
            <Typography variant="caption">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)</Typography>
          </summary>
          <Box component="pre" sx={{ 
            mt: 2, 
            p: 1, 
            fontSize: '0.7rem',
            bgcolor: '#f5f5f5',
            borderRadius: 1,
            overflowX: 'auto'
          }}>
            {JSON.stringify({
              userId,
              subscriptionStatus: {
                has_subscription: subscriptionStatus.has_subscription,
                is_active: subscriptionStatus.is_active,
                subscription_end_date: subscriptionStatus.subscription_end_date
              },
              calculatedIsActive,
              validEndDate,
              lastUpdateTime
            }, null, 2)}
          </Box>
          
          <Typography variant="caption" sx={{ mt: 2, display: 'block' }}>
            –ñ—É—Ä–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:
          </Typography>
          <Box component="pre" sx={{ 
            mt: 1, 
            p: 1, 
            fontSize: '0.7rem',
            bgcolor: '#f5f5f5',
            borderRadius: 1,
            maxHeight: '150px',
            overflowY: 'auto'
          }}>
            {refreshLog.join('\n')}
          </Box>
        </details>
      </Box>
    </Paper>
  );
};

export default SubscriptionWidget; 