import React, { useState, useEffect, useRef, SetStateAction, Dispatch, useMemo } from 'react';
import '../styles/SubscriptionWidget.css';
import { getUserSubscriptionStatus, SubscriptionStatus, generateInvoice } from '../api/subscription';
import axios from 'axios';

// API_URL –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
const API_URL = '';

const SubscriptionWidget: React.FC<{
  userId: string | null,
  subscriptionStatus: SubscriptionStatus | null,
  onSubscriptionUpdate: () => void,
  isActive?: boolean
}> = ({ userId, subscriptionStatus, onSubscriptionUpdate, isActive }) => {
  console.log('[SubscriptionWidget] üîÑ –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –ø—Ä–æ–ø—Å–∞–º–∏:', 
    {userId, subscriptionStatus, isActive, 
     hasSubscription: subscriptionStatus?.has_subscription,
     isActiveFromStatus: subscriptionStatus?.is_active,
     endDate: subscriptionStatus?.subscription_end_date});
  
  const [error, setError] = useState<string | null>(null);
  const [showPaymentInfo, setShowPaymentInfo] = useState<boolean>(false);
  const SUBSCRIPTION_PRICE = 1; // –≤—Ä–µ–º–µ–Ω–Ω–æ 1 Star –¥–ª—è —Ç–µ—Å—Ç–∞
  const [isSubscribing, setIsSubscribing] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [refreshLog, setRefreshLog] = useState<string[]>([]);
  const [lastUpdateTime, setLastUpdateTime] = useState<string>(
    new Date().toLocaleTimeString()
  );
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º refs
  const pollIntervalRef = useRef<number | null>(null);
  const pollTimeoutRef = useRef<number | null>(null);
  const mountedRef = useRef(true); // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ end_date –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const isEndDateValid = useMemo(() => {
    if (subscriptionStatus?.subscription_end_date) {
      try {
        const endDate = new Date(subscriptionStatus.subscription_end_date);
        const now = new Date();
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã –∏ —á—Ç–æ –æ–Ω–∞ –≤ –±—É–¥—É—â–µ–º
        return !isNaN(endDate.getTime()) && endDate > now;
      } catch (e) {
        console.error('[SubscriptionWidget] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ end_date:', e);
        return false;
      }
    }
    return false;
  }, [subscriptionStatus?.subscription_end_date]);

  // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const calculatedIsActive = useMemo(() => {
    // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏ API
    if (isEndDateValid) {
      console.log('[SubscriptionWidget] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ end_date');
      return true;
    }
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º is_active –∏–∑ API
    if (subscriptionStatus?.is_active === true) {
      console.log('[SubscriptionWidget] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ is_active');
      return true;
    }
    
    // –ó–∞—Ç–µ–º has_subscription –∏–∑ API
    if (subscriptionStatus?.has_subscription === true) {
      console.log('[SubscriptionWidget] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ has_subscription');
      return true;
    }
    
    console.log('[SubscriptionWidget] ‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –ù–ï –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ –≤—Å–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º');
    return false;
  }, [subscriptionStatus, isEndDateValid]);

  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
  useEffect(() => {
    const timestamp = new Date().toLocaleTimeString();
    setLastUpdateTime(timestamp);
    
    const statusLog = `[${timestamp}] –°—Ç–∞—Ç—É—Å: has_subscription=${subscriptionStatus?.has_subscription}, is_active=${subscriptionStatus?.is_active}, end_date=${subscriptionStatus?.subscription_end_date?.substring(0, 10) || 'null'}`;
    setRefreshLog(prev => [statusLog, ...prev.slice(0, 4)]); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    
    console.log(`[SubscriptionWidget] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:`, 
      {hasSubscription: subscriptionStatus?.has_subscription,
       isActive: subscriptionStatus?.is_active,
       endDate: subscriptionStatus?.subscription_end_date,
       calculatedIsActive});
  }, [subscriptionStatus, calculatedIsActive]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é stopPolling
  const stopPolling = () => {
    if (pollIntervalRef.current) {
      clearInterval(pollIntervalRef.current);
      pollIntervalRef.current = null;
      console.log('[SubscriptionWidget] Polling stopped by stopPolling function');
    }
    if (pollTimeoutRef.current) {
      clearTimeout(pollTimeoutRef.current);
      pollTimeoutRef.current = null;
      console.log('[SubscriptionWidget] Polling timeout cleared');
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const refreshSubscriptionStatus = async () => {
    if (!userId || isRefreshing) return;
    
    try {
      console.log('[SubscriptionWidget] üîÑ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞...');
      setIsRefreshing(true);
      
      await onSubscriptionUpdate();
      
      const successTimestamp = new Date().toLocaleTimeString();
      setRefreshLog(prev => [`[${successTimestamp}] ‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`, ...prev.slice(0, 4)]);
      console.log('[SubscriptionWidget] ‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (err) {
      console.error('[SubscriptionWidget] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      
      const errorTimestamp = new Date().toLocaleTimeString();
      setRefreshLog(prev => [`[${errorTimestamp}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${err}`, ...prev.slice(0, 4)]);
    } finally {
      if (mountedRef.current) {
        setIsRefreshing(false);
      }
    }
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('[SubscriptionWidget] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏');
    refreshSubscriptionStatus();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    const statusInterval = setInterval(() => {
      if (mountedRef.current) {
        console.log('[SubscriptionWidget] –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª)');
        onSubscriptionUpdate();
      }
    }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    return () => {
      mountedRef.current = false;
      clearInterval(statusInterval);
      console.log('[SubscriptionWidget] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –æ—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã');
    };
  }, [userId]);

  const handleSubscribeViaMainButton = () => {
    console.log('[SubscriptionWidget] –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ MainButton –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏');
    if (window.Telegram?.WebApp?.showConfirm) {
      window.Telegram.WebApp.showConfirm(
        '–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ ' + SUBSCRIPTION_PRICE + ' Stars?',
        (confirmed) => {
          console.log('[SubscriptionWidget] showConfirm –æ—Ç–≤–µ—Ç:', confirmed);
          if (confirmed) {
            handleSubscribe();
          }
        }
      );
    } else {
      handleSubscribe();
    }
  };

  const handleInvoiceGeneration = async (userId: string) => {
    console.log('[SubscriptionWidget] handleInvoiceGeneration –≤—ã–∑–≤–∞–Ω –¥–ª—è userId:', userId);
    if (!window.Telegram?.WebApp) {
      console.error('[SubscriptionWidget] Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram WebApp –¥–ª—è –æ–ø–ª–∞—Ç—ã.');
      setIsSubscribing(false);
      return;
    }

    try {
      setIsSubscribing(true);
      const response = await fetch('/generate-stars-invoice-link', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: userId, amount: 1 })
      });
      const data = await response.json();
      console.log('[SubscriptionWidget] –û—Ç–≤–µ—Ç –æ—Ç /generate-stars-invoice-link:', data);
      if (data.success && data.invoice_link) {
        if (typeof window.Telegram.WebApp?.openInvoice === 'function') {
          window.Telegram.WebApp.openInvoice(data.invoice_link, async (status) => {
            setIsSubscribing(false);
            const timestamp = new Date().toISOString();
            console.log(`[SubscriptionWidget] [${timestamp}] üí∞ openInvoice callback —Å—Ç–∞—Ç—É—Å: ${status}`);
            
            if (status === 'paid') {
              console.log(`[SubscriptionWidget] [${timestamp}] ‚úÖ Payment status: paid. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã...`);
              
              // --- –î–æ–±–∞–≤–ª—è–µ–º —É—Å–∏–ª–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
              // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
              const checkSubscriptionStatus = async () => {
                const checkTimestamp = new Date().toISOString();
                console.log(`[SubscriptionWidget] [${checkTimestamp}] üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏...`);
                
                try {
                  // –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                  onSubscriptionUpdate();
                  console.log(`[SubscriptionWidget] [${checkTimestamp}] ‚úì –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
                  return true;
                } catch (err) {
                  console.error(`[SubscriptionWidget] [${checkTimestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, err);
                  return false;
                }
              };

              // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
              console.log(`[SubscriptionWidget] [${timestamp}] üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞`);
              await checkSubscriptionStatus();
              
              // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
              const intervals = [1000, 2000, 3000, 5000, 8000]; // –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º—Å
              
              for (let i = 0; i < intervals.length; i++) {
                console.log(`[SubscriptionWidget] [${new Date().toISOString()}] ‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å #${i+1} —á–µ—Ä–µ–∑ ${intervals[i]/1000} —Å–µ–∫...`);
                
                // –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await new Promise(resolve => setTimeout(resolve, intervals[i]));
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                console.log(`[SubscriptionWidget] [${new Date().toISOString()}] üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å #${i+1}...`);
                await checkSubscriptionStatus();
              }
              
              console.log(`[SubscriptionWidget] [${new Date().toISOString()}] üèÅ –°–µ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
              // --- –ö–æ–Ω–µ—Ü —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ ---
              
              if (window?.Telegram?.WebApp?.showPopup) {
                window.Telegram.WebApp.showPopup({
                  title: '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
                  message: '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å...',
                  buttons: [{ type: 'ok' }]
                });
              }
              stopPolling();
              console.log(`[SubscriptionWidget] [${new Date().toISOString()}] üîî –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏`);
            } else {
              console.log(`[SubscriptionWidget] [${timestamp}] ‚ùå Payment status: ${status}. –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
            }
          });
        } else {
          setError('–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Stars –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏.');
          setIsSubscribing(false);
          console.error('[SubscriptionWidget] openInvoice –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–æ–π—Å–∞');
        setIsSubscribing(false);
        console.error('[SubscriptionWidget] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–æ–π—Å–∞:', data.error);
      }
    } catch (error) {
      setError(`–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setIsSubscribing(false);
      console.error('[SubscriptionWidget] –û—à–∏–±–∫–∞ –≤ handleInvoiceGeneration:', error);
    }
  };

  const handleSubscribe = async () => {
    console.log('[SubscriptionWidget] handleSubscribe –≤—ã–∑–≤–∞–Ω. userId:', userId);
    if (!userId) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.error('[SubscriptionWidget] –ù–µ—Ç userId –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏');
      return;
    }
    await handleInvoiceGeneration(userId);
  };

  useEffect(() => {
    console.log('[SubscriptionWidget] useEffect –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp. isActive:', isActive);
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.ready();
      if (window.Telegram.WebApp.MainButton) {
        window.Telegram.WebApp.MainButton.setText('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∑–∞ ' + SUBSCRIPTION_PRICE + ' Stars');
        window.Telegram.WebApp.MainButton.color = '#2481cc';
        window.Telegram.WebApp.MainButton.textColor = '#ffffff';
        if (isActive) {
          window.Telegram.WebApp.MainButton.hide();
        }
        window.Telegram.WebApp.MainButton.onClick(handleSubscribeViaMainButton);
        console.log('[SubscriptionWidget] MainButton –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }
      if (typeof window.Telegram.WebApp.onEvent === 'function') {
        window.Telegram.WebApp.onEvent('popup_closed', () => {
          console.log('[SubscriptionWidget] popup_closed event');
          onSubscriptionUpdate();
        });
        window.Telegram.WebApp.onEvent('invoiceClosed', () => {
          console.log('[SubscriptionWidget] invoiceClosed event');
          onSubscriptionUpdate();
        });
      }
    }
  }, [isActive, onSubscriptionUpdate]);

  // –î–æ–±–∞–≤–ª—è–µ–º useEffect –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ Premium —Å—Ç–∞—Ç—É—Å–∞
  useEffect(() => {
    console.log('[SubscriptionWidget] useEffect: –∏–∑–º–µ–Ω–µ–Ω–∏–µ subscriptionStatus:', subscriptionStatus);
    if (subscriptionStatus?.has_subscription) {
      console.log('[SubscriptionWidget] Premium status confirmed. Stopping polling.');
      stopPolling();
    }
  }, [subscriptionStatus]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('[SubscriptionWidget] –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞. –û—á–∏—â–∞—é MainButton –∏ polling');
      if (window.Telegram?.WebApp?.MainButton && typeof window.Telegram.WebApp.MainButton.offClick === 'function') {
        window.Telegram.WebApp.MainButton.offClick(handleSubscribeViaMainButton);
      }
      stopPolling(); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    };
  }, [isActive, onSubscriptionUpdate]);

  if (!userId) {
    console.error('[SubscriptionWidget] –ù–µ—Ç userId!');
    return (
      <div className="subscription-widget error">
        <p>–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram.<br/>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Telegram.<br/>–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Telegram –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.</p>
        <button onClick={() => window.Telegram?.WebApp?.close?.()}>–ó–∞–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</button>
        <pre style={{textAlign: 'left', fontSize: '12px', marginTop: '16px', color: '#888', background: '#222', padding: '8px', borderRadius: '6px'}}>
          userId: {userId}
        </pre>
      </div>
    );
  }

  if (error) {
    console.error('[SubscriptionWidget] –û—à–∏–±–∫–∞:', error);
    return (
      <div className="subscription-widget error">
        <p>–û—à–∏–±–∫–∞: {error}</p>
        <button onClick={refreshSubscriptionStatus}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        <pre style={{textAlign: 'left', fontSize: '12px', marginTop: '16px', color: '#888', background: '#222', padding: '8px', borderRadius: '6px'}}>
          userId: {userId}
        </pre>
      </div>
    );
  }

  if (!subscriptionStatus) {
    console.log('[SubscriptionWidget] subscriptionStatus –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞—é –ª–æ–∞–¥–µ—Ä');
    return <div className="subscription-widget loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ...</div>;
  }

  // –ù–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
  console.log('[SubscriptionWidget] –†–µ–Ω–¥–µ—Ä–∏–Ω–≥. isPremium:', calculatedIsActive, 'subscriptionStatus:', subscriptionStatus);

  // ======= –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í –†–ï–ù–î–ï–†–ï =======
  console.log('[SubscriptionWidget][RENDER] userId:', userId);
  console.log('[SubscriptionWidget][RENDER] subscriptionStatus:', subscriptionStatus);
  console.log('[SubscriptionWidget][RENDER] isPremium:', calculatedIsActive);
  console.log('[SubscriptionWidget][RENDER] error:', error);
  console.log('[SubscriptionWidget][RENDER] isSubscribing:', isSubscribing);
  console.log('[SubscriptionWidget][RENDER] showPaymentInfo:', showPaymentInfo);
  console.log('[SubscriptionWidget][RENDER] pollIntervalRef:', pollIntervalRef.current);
  console.log('[SubscriptionWidget][RENDER] pollTimeoutRef:', pollTimeoutRef.current);

  // ======= –õ–û–ì–ò–†–£–ï–ú –í–°–ï –ü–†–û–ü–°–´ –ò –°–û–°–¢–û–Ø–ù–ò–Ø =======
  console.log('[SubscriptionWidget][RENDER] props:', { userId, subscriptionStatus, isActive });
  console.log('[SubscriptionWidget][RENDER] state:', { error, showPaymentInfo, isSubscribing });

  // ======= –û–ë–ï–†–¢–ö–ê –î–õ–Ø onSubscriptionUpdate –° –õ–û–ì–ê–ú–ò =======
  const onSubscriptionUpdateWithLog = () => {
    console.log('[SubscriptionWidget] –í—ã–∑–æ–≤ onSubscriptionUpdateWithLog');
    setIsRefreshing(true);
    onSubscriptionUpdate();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      if (mountedRef.current) {
        setIsRefreshing(false);
        setLastUpdateTime(new Date().toLocaleTimeString());
      }
    }, 1500);
  };

  // ======= –õ–û–ì–ò–†–£–ï–ú useEffect'—ã =======
  useEffect(() => {
    console.log('[SubscriptionWidget][useEffect] –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞. userId:', userId, 'subscriptionStatus:', subscriptionStatus, 'isActive:', isActive);
  }, [userId, subscriptionStatus, isActive]);

  useEffect(() => {
    console.log('[SubscriptionWidget][useEffect] error –∏–∑–º–µ–Ω–∏–ª—Å—è:', error);
  }, [error]);

  useEffect(() => {
    console.log('[SubscriptionWidget][useEffect] isSubscribing –∏–∑–º–µ–Ω–∏–ª—Å—è:', isSubscribing);
  }, [isSubscribing]);

  useEffect(() => {
    console.log('[SubscriptionWidget][useEffect] showPaymentInfo –∏–∑–º–µ–Ω–∏–ª—Å—è:', showPaymentInfo);
  }, [showPaymentInfo]);

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ
  const togglePaymentInfo = () => setShowPaymentInfo(!showPaymentInfo);

  return (
    <div className="subscription-widget">
      <h3>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</h3>
      
      {calculatedIsActive ? (
        <>
          <div className="status-badge premium">–ü—Ä–µ–º–∏—É–º</div>
          <div className="subscription-active">
            <h4>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</h4>
            <p>
              –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:
            </p>
            <ul>
              <li>–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤</li>
              <li>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π</li>
              <li>–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
              <li>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π</li>
            </ul>
            
            {subscriptionStatus.subscription_end_date && (
              <p>
                <strong>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</strong> {new Date(subscriptionStatus.subscription_end_date).toLocaleDateString()}
              </p>
            )}
          </div>
        </>
      ) : (
        <>
          <div className="status-badge free">–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω</div>
          <div className="subscription-free">
            <h4>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø</h4>
            <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</p>
            
            <div className="subscription-offer">
              <h4>–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:</h4>
              <ul>
                <li>–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤</li>
                <li>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π</li>
                <li>–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
                <li>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π</li>
              </ul>
              <button 
                className="subscribe-button" 
                onClick={handleSubscribe}
                disabled={isSubscribing}
              >
                {isSubscribing ? '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø'} 
              </button>
              
              <p style={{ marginTop: '10px', fontSize: '14px', color: '#666' }}>
                <a href="#" onClick={togglePaymentInfo}>
                  {showPaymentInfo ? '–°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ' : '–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?'}
                </a>
              </p>
              
              {showPaymentInfo && (
                <div className="payment-info">
                  <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ</h4>
                  <p>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Stars:</p>
                  <ol>
                    <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø"</li>
                    <li>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ Telegram</li>
                    <li>–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</li>
                  </ol>
                  <p>
                    <small>
                      * –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_PRICE} Telegram Stars
                    </small>
                  </p>
                  <button className="cancel-button" onClick={togglePaymentInfo}>
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                </div>
              )}
            </div>
          </div>
        </>
      )}
      
      {/* –ë–ª–æ–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ */}
      <div className="refresh-status">
        <button
          className="refresh-button"
          onClick={refreshSubscriptionStatus}
          disabled={isRefreshing}
        >
          {isRefreshing ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'}
        </button>
        <small>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdateTime}</small>
      </div>
      
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ */}
      <div className="debug-info">
        <details>
          <summary>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)</summary>
          <pre>
{JSON.stringify({
  userId: userId,
  subscriptionStatus: {
    has_subscription: subscriptionStatus.has_subscription,
    is_active: subscriptionStatus.is_active,
    subscription_end_date: subscriptionStatus.subscription_end_date
  },
  calculatedIsActive: calculatedIsActive,
  isEndDateValid: isEndDateValid,
  lastUpdateTime: lastUpdateTime
}, null, 2)}
          </pre>
          
          <h5>–ñ—É—Ä–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</h5>
          <pre>
{refreshLog.join('\n')}
          </pre>
        </details>
      </div>
    </div>
  );
};

export default SubscriptionWidget; 