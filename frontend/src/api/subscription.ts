import axios from 'axios';

// –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export interface SubscriptionStatus {
  has_subscription: boolean;
  is_active: boolean;
  subscription_end_date?: string | null;
}

// API_URL –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
const API_URL = '';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @returns Promise —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export const getUserSubscriptionStatus = async (userId: string | null): Promise<SubscriptionStatus> => {
  if (!userId) {
    console.error('%c[getUserSubscriptionStatus] üõë –û–®–ò–ë–ö–ê: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω userId!', 'color:red;font-weight:bold');
    throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
  }
  console.log(`%c[getUserSubscriptionStatus] üöÄ –ó–ê–ü–†–û–° —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è userId: ${userId}`, 'color:blue;font-weight:bold');
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const timestamp = Date.now();
    const randomParam = Math.random().toString(36).substring(2, 10);
    const url = `/subscription/status?user_id=${userId}&t=${timestamp}&nocache=${randomParam}`;
    
    console.log(`%c[getUserSubscriptionStatus] üì° GET ${url}`, 'color:purple');
    console.log(`%c[getUserSubscriptionStatus] ‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toISOString()}`, 'color:gray');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–µ—Ç–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const response = await axios.get(url, {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate, max-age=0',
        'Pragma': 'no-cache',
        'Expires': '0',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    
    console.log(`%c[getUserSubscriptionStatus] ‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ [${response.status}]:`, 'color:green;font-weight:bold');
    console.log(`%c[getUserSubscriptionStatus] üì¶ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, 'color:green');
    console.log(response.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º debug-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (response.data.debug) {
      console.log(`%c[getUserSubscriptionStatus] üîç DEBUG-–ò–ù–§–û–†–ú–ê–¶–ò–Ø:`, 'color:orange;font-weight:bold');
      console.log(response.data.debug);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    if (response.data.error) {
      console.error(`%c[getUserSubscriptionStatus] üõë –û—à–∏–±–∫–∞ API: ${response.data.error}`, 'color:red');
    }
    
    // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    const { has_subscription = false, is_active = false, subscription_end_date = null } = response.data;
    
    // –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    console.log(`%c[getUserSubscriptionStatus] üìä –î–ê–ù–ù–´–ï –ü–û–î–ü–ò–°–ö–ò:`, 'color:blue');
    console.log(`  ‚Ä¢ has_subscription: ${has_subscription} (${typeof has_subscription})`);
    console.log(`  ‚Ä¢ is_active: ${is_active} (${typeof is_active})`);
    console.log(`  ‚Ä¢ subscription_end_date: ${subscription_end_date}`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const result = { 
      has_subscription: !!has_subscription, // –ü—Ä–∏–≤–æ–¥–∏–º –∫ boolean
      is_active: !!is_active, // –ü—Ä–∏–≤–æ–¥–∏–º –∫ boolean
      subscription_end_date 
    };
    
    console.log(`%c[getUserSubscriptionStatus] ‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, 'color:blue;font-weight:bold');
    console.log(result);
    
    return result;
  } catch (error) {
    console.error(`%c[getUserSubscriptionStatus] üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:`, 'color:red;font-weight:bold');
    
    if (axios.isAxiosError(error)) {
      console.error(`%c[getUserSubscriptionStatus] üåê –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'color:red');
      console.error(`–°—Ç–∞—Ç—É—Å: ${error.response?.status || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}`);
      console.error(`–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:`, error.response?.data);
      console.error(`–ó–∞–≥–æ–ª–æ–≤–∫–∏:`, error.response?.headers);
    } else {
      console.error(`%c[getUserSubscriptionStatus] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:`, 'color:red');
      console.error(error);
    }
    
    // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    throw error;
  }
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param paymentId ID –ø–ª–∞—Ç–µ–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns Promise —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
 */
export const createSubscription = async (userId: string | null, paymentId?: string) => {
  if (!userId) {
    console.error('[createSubscription] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω userId!');
    throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
  }
  console.log(`[createSubscription] –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è userId: ${userId}, paymentId: ${paymentId}`);
  try {
    const response = await axios.post(`${API_URL}/subscription/create`, 
      { payment_id: paymentId },
      { headers: { 'x-telegram-user-id': userId } }
    );
    console.log('[createSubscription] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
    return response.data;
  } catch (error) {
    console.error('[createSubscription] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    throw error;
  }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @param amount –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ Stars
 * @returns Promise —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–≤–æ–π—Å–∞, –≤–∫–ª—é—á–∞—è URL
 */
export const generateInvoice = async (userId: number, amount: number = 70) => {
  console.log(`[generateInvoice] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è userId: ${userId}, amount: ${amount}`);
  try {
    const response = await axios.post(`${API_URL}/generate-invoice`, {
      user_id: userId,
      amount
    });
    console.log('[generateInvoice] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
    return response.data;
  } catch (error) {
    console.error('[generateInvoice] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–æ–π—Å–∞:', error);
    throw error;
  }
}; 